#!/usr/local/bin/python3.6

import sys
import imp
imp.load_source('bugzillautils', '/usr/local/share/generic-worker/bugzilla-utils.py')
from bugzillautils import *
import subprocess
import os

def start_generic_worker(param1,param2,param3, param4):
    # Start generic worker and return exit status code for generic worker

    # If this file exists when the worker starts up, and its content is equal
    # to numberOfTasksToRun, the worker won't exit and machine won't reboot.

    subprocess.Popen(['rm', '-f', 'tasks-resolved-count.txt'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    gw_command = [param1, param2, param3, param4]
    os.environ["PATH"] = "/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin"
    generic_worker = subprocess.Popen(gw_command, stdout=subprocess.PIPE)
    logger = subprocess.Popen(['logger','-t','generic-worker','-s'], stdin=generic_worker.stdout, stdout=subprocess.PIPE)
    return generic_worker.returncode

def quarantine_worker():
    # Quarantine the worker, if worker is in bad state
    quarantine_command = ["/usr/local/bin/quarantine-worker", "releng-hardware", "<%= @worker_type %>", "<%= @worker_group %>", "<%= @hostname %>", "720h5s"]
    os.environ["TASKCLUSTER_CLIENT_ID"] = "<%= @quarantine_client_id %>" 
    os.environ["TASKCLUSTER_ACCESS_TOKEN"] = "<%= @quarantine_access_token %>"
    quarantine = subcommand.Popen(quarantine_command, stdout=subprocess.PIPE)
    return quarantine.returncode

def create_semaphore_file(filename):
    # Create the semaphore file when the worker is in quarantine
    file = open(filename, "w+")
    file.write("quarantined worker")
    file.close

def remove_semaphore_file(filename):
    # Remove quarantine file, if the worker went back to the working state
    os.remove(filename)

def restart_worker():
    # Restart the worker
    os.system("<%= @reboot_command %>")

def exist_semaphore_file(filename):
    # Check if quarantine file exist
    if os.path.exists(filename):
        return True
    else:
        return False

def sleep(time):
    # Sleep to prevent this script from terminating naturally, and launchd restarting
    # it. Instead, the shutdown should cause this script to terminate (so it won't
    # really sleep for 2 mins). If shutdown doesn't kick in within 2 mins, it is sane
    # for this script to exit, and allow launchd to fire up the worker again.
    command = '/bin/sleep' + time
    os.system(command)

def main():
    # This is a wrapper script for calling generic worker, such that when the worker
    # exits, this script will reboot the machine. Note, in the worker config
    # (/etc/generic-worker.config) we set numberOfTasksToRun to 1 so that the worker
    # will exit after running a single task. This script is then responsible for
    # rebooting the machine.    
    generic_worker_bin = '/usr/local/bin/generic-worker'
    quarantine_file = "<%= scope.lookupvar('users::builder::home') %>/quarantined"

    # start generic-worker process
    return_code = start_generic_worker(generic_worker_bin, sys.argv[1], sys.argv[2], sys.argv[3])
    if return_code == 69:
        # If generic-worker considers that the host environment is in an invalid/corrupted
        # state (for example, it cannot write to disk), it will return the exit code 69.
        #
        # More information about generic-worker exit codes can be seen here:
        # https://docs.taskcluster.net/docs/reference/workers/generic-worker#set-up-your-env
        #
        # If this happens, we make a call to Taskcluster Queue to quarantine the worker, so
        # that no further tasks will be provided to the worker until the quarantine expires.
        # This prevents the worker from burning through tasks that it is not able to execute
        # properly.
        if exist_semaphore_file(quarantine_file):
            print("Worker is quarantined")
        else:
            create_semaphore_file(quarantine_file)
        # Quarantine the worker        
        quarantine_worker()
        # Open the bug
        create_open_bug_self_failure()
    else:
        # If the exit code is other that 69, close the bug, if is a bug open for this worker
        # and restart the worker
        if exist_semaphore_file(quarantine_file):
            remove_semaphore_file(quarantine_file)
        close_bug_self_failure()
        restart_worker()
        sleep(120)

if __name__ == "__main__":
    main()
