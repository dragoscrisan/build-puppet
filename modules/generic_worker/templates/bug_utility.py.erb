
import bugzilla
import socket



def get_hostname():
    return socket.getfqdn().split('.')[0]

def get_domain():
    return socket.getfqdn().split('.')[3].upper()

def get_fullname():
    return socket.getfqdn()

def get_bug_alias():
    return get_hostname()+"_code69"

def bug_structure(bugzilla):
    bug_alias = get_hostname()+"_code69"
    bug_product = "Infrastructure & Operations"
    bug_component = "CIDuty"
    bug_version = "unspecified"
    bug_summary = "["+get_domain()+"] "+ get_hostname() + " Generic worker exit code 69"
    bug_description = ("Error code 69 means: worker panic - either a worker bug, or the environment is not suitable for running "
                    "a task, e.g. a file cannot be written to the file system, or something else did "
                    "not work that was required in order to execute a task. See config setting "
                    "shutdownMachineOnInternalError. "
                    "The following log were provided: "
                    "https://papertrailapp.com/systems/"+get_fullname()+"/events?q=program%3Ageneric-worker")
    bug_info = bugzilla.build_createbug(
        alias       = bug_alias,
        cc          = "ciduty@mozilla.com",
        product     = bug_product,
        component   = bug_component,
        version     = bug_version,
        summary     = bug_summary,
        description = bug_description
    )
    return bug_info

def login():
    """ First time loged in to bugzilla """
    api_key = "<%= @bugzilla_api_key %>"
    bz = bugzilla.Bugzilla(url="https://bugzilla.mozilla.org", api_key = api_key)
    assert bz.logged_in
    return bz

def create_new_bug(bugzilla):
    buginfo = bug_structure(bugzilla)
    new_bug = bugzilla.createbug(buginfo)
    return new_bug.id

def find_bug(bugzilla, bug_id):
    return bugzilla.getbug(bug_id)

def close_this_bug(bugzilla, bug_id):
    bug = find_bug(bugzilla, bug_id)
    update = bugzilla.build_update(comment="The worker is now in working state", status="RESOLVED", resolution="FIXED")
    bugzilla.update_bugs([bug.id], update)

def find_bug_for_alias(bugzilla, alias_name):
    query = bugzilla.build_query(
        alias=alias_name
    )
    if len(bugzilla.query(query)) == 0:
        result = 0
    else:
        result = bugzilla.query(query)[0].id
    return result

def reopen_bug(bugzilla, bug_id):
    bug = find_bug(bugzilla, bug_id)
    update = bugzilla.build_update(status="REOPENED")
    bugzilla.update_bugs([bug.id], update)

def open_bug():
    ''' Check if alias for the worker exist or not. If the alias exist, then reopen the existing bug, if not, will create one '''
    bugzilla = login()
    bug_id = find_bug_for_alias(bugzilla, get_bug_alias())
    if  bug_id == 0:
        bug_id = create_new_bug(bugzilla)
    else:
        ''' Check if the bug is resolved or not '''
        bug_status = bugzilla.getbug(bug_id).status
        if bug_status == "RESOLVED":
            reopen_bug(bugzilla, bug_id)

def close_bug():
    '''Let's close the bug'''
    bugzilla = login()
    bug_id = find_bug_for_alias(bugzilla, get_bug_alias())
    bug_status = bugzilla.getbug(bug_id).status
    if bug_status != "RESOLVED":
        close_this_bug(bugzilla, bug_id)
